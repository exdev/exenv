<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0057)http://keplerproject.github.com/luafilesystem/manual.html -->
<HTML xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><HEAD><META http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<TITLE>LuaFileSystem</TITLE>
    <LINK rel="stylesheet" href="./LuaFileSystem_files/doc.css" type="text/css">
	
</HEAD><BODY>

<DIV id="container">

<DIV id="product">
	<DIV id="product_logo">
        <A href="http://www.keplerproject.org/"><IMG alt="LuaFileSystem" src="./LuaFileSystem_files/luafilesystem.png"></A>
    </DIV>
	<DIV id="product_name"><BIG><STRONG>LuaFileSystem</STRONG></BIG></DIV>
	<DIV id="product_description">File System Library for the Lua Programming Language</DIV>
</DIV> <!-- id="product" -->

<DIV id="main">
	
<DIV id="navigation">
<H1>LuaFileSystem</H1>
	<UL>
		<LI><A href="http://keplerproject.github.com/luafilesystem/index.html">Home</A>
			<UL>
				<LI><A href="http://keplerproject.github.com/luafilesystem/index.html#overview">Overview</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/index.html#status">Status</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/index.html#download">Download</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/index.html#history">History</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/index.html#credits">Credits</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/index.html#contact">Contact us</A></LI>
			</UL>
		</LI>
		<LI><STRONG>Manual</STRONG>
			<UL>
				<LI><A href="http://keplerproject.github.com/luafilesystem/manual.html#introduction">Introduction</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/manual.html#building">Building</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/manual.html#installation">Installation</A></LI>
				<LI><A href="http://keplerproject.github.com/luafilesystem/manual.html#reference">Reference</A></LI>
			</UL>
		</LI>
		<LI><A href="http://keplerproject.github.com/luafilesystem/examples.html">Examples</A></LI>
        <LI><A href="http://luaforge.net/projects/luafilesystem/">Project</A>
            <UL>
                <LI><A href="http://luaforge.net/tracker/?group_id=66">Bug Tracker</A></LI>
                <LI><A href="http://luaforge.net/scm/?group_id=66">CVS</A></LI>
            </UL>
        </LI>
		<LI><A href="http://keplerproject.github.com/luafilesystem/license.html">License</A></LI>
	</UL>
</DIV> <!-- id="navigation" -->

<DIV id="content">

<H2><A name="introduction"></A>Introduction</H2>

<P>LuaFileSystem is a <A href="http://www.lua.org/">Lua</A> library
developed to complement the set of functions related to file
systems offered by the standard Lua distribution.</P>

<P>LuaFileSystem offers a portable way to access
the underlying directory structure and file attributes.</P>

<H2><A name="building"></A>Building</H2>

<P>
LuaFileSystem should be built with Lua 5.1 so the language library
and header files for the target version must be installed properly.
</P>

<P>
LuaFileSystem offers a Makefile and a separate configuration file,
<CODE>config</CODE>,
which should be edited to suit your installation before running
<CODE>make</CODE>.
The file has some definitions like paths to the external libraries,
compiler options and the like.
</P>

<P>On Windows, the C runtime used to compile LuaFileSystem must be the same
runtime that Lua uses, or some LuaFileSystem functions will not work.</P>

<H2><A name="installation"></A>Installation</H2>

<P>The easiest way to install LuaFileSystem is to use LuaRocks:</P>

<PRE class="example">luarocks install luafilesystem
</PRE>

<P>If you prefer to install LuaFileSystem manually, the compiled binary should be copied to a directory in your
<A href="http://www.lua.org/manual/5.1/manual.html#pdf-package.cpath">C path</A>.</P>

<H2><A name="reference"></A>Reference</H2>

<P>
LuaFileSystem offers the following functions:
</P>

<DL class="reference">
    <DT><A name="attributes"></A><STRONG><CODE>lfs.attributes (filepath [, aname])</CODE></STRONG></DT>
    <DD>Returns a table with the file attributes corresponding to
    <CODE>filepath</CODE> (or <CODE>nil</CODE> followed by an error message
    in case of error).
    If the second optional argument is given, then only the value of the
    named attribute is returned (this use is equivalent to
    <CODE>lfs.attributes(filepath).aname</CODE>, but the table is not created
    and only one attribute is retrieved from the O.S.).
    The attributes are described as follows;
    attribute <CODE>mode</CODE> is a string, all the others are numbers,
    and the time related attributes use the same time reference of
    <A href="http://www.lua.org/manual/5.1/manual.html#pdf-os.time"><CODE>os.time</CODE></A>: 
        <DL>
        <DT><STRONG><CODE>dev</CODE></STRONG></DT>
        <DD>on Unix systems, this represents the device that the inode resides on. On Windows systems,
        represents the drive number of the disk containing the file</DD>
        
        <DT><STRONG><CODE>ino</CODE></STRONG></DT>
        <DD>on Unix systems, this represents the inode number. On Windows systems this has no meaning</DD>
        
        <DT><STRONG><CODE>mode</CODE></STRONG></DT>
        <DD>string representing the associated protection mode (the values could be
        <CODE>file</CODE>, <CODE>directory</CODE>, <CODE>link</CODE>, <CODE>socket</CODE>,
        <CODE>named pipe</CODE>, <CODE>char device</CODE>, <CODE>block device</CODE> or
        <CODE>other</CODE>)</DD>
        
        <DT><STRONG><CODE>nlink</CODE></STRONG></DT>
		<DD>number of hard links to the file</DD>

        <DT><STRONG><CODE>uid</CODE></STRONG></DT>
		<DD>user-id of owner (Unix only, always 0 on Windows)</DD>

        <DT><STRONG><CODE>gid</CODE></STRONG></DT>
		<DD>group-id of owner (Unix only, always 0 on Windows)</DD>

        <DT><STRONG><CODE>rdev</CODE></STRONG></DT>
		<DD>on Unix systems, represents the device type, for special file inodes.
        On Windows systems represents the same as <CODE>dev</CODE></DD>

        <DT><STRONG><CODE>access</CODE></STRONG></DT>
		<DD>time of last access</DD>

        <DT><STRONG><CODE>modification</CODE></STRONG></DT>
		<DD>time of last data modification</DD>

        <DT><STRONG><CODE>change</CODE></STRONG></DT>
		<DD>time of last file status change</DD>

        <DT><STRONG><CODE>size</CODE></STRONG></DT>
		<DD>file size, in bytes</DD>

        <DT><STRONG><CODE>blocks</CODE></STRONG></DT>
		<DD>block allocated for file; (Unix only)</DD>
        
        <DT><STRONG><CODE>blksize</CODE></STRONG></DT>
		<DD>optimal file system I/O blocksize; (Unix only)</DD>
	    </DL>
    This function uses <CODE>stat</CODE> internally thus if the given
    <CODE>filepath</CODE> is a symbolic link, it is followed (if it points to
    another link the chain is followed recursively) and the information
    is about the file it refers to.
    To obtain information about the link itself, see function
    <A href="http://keplerproject.github.com/luafilesystem/manual.html#symlinkattributes">lfs.symlinkattributes</A>.
	</DD>

    <DT><A name="chdir"></A><STRONG><CODE>lfs.chdir (path)</CODE></STRONG></DT>
    <DD>Changes the current working directory to the given
    <CODE>path</CODE>.<BR>
    Returns <CODE>true</CODE> in case of success or <CODE>nil</CODE> plus an
    error string.</DD>

    <DT><A name="chdir"></A><STRONG><CODE>lfs.lock_dir(path, [seconds_stale])</CODE></STRONG></DT>
    <DD>Creates a lockfile (called lockfile.lfs) in <CODE>path</CODE> if it does not
  exist and returns the lock. If the lock already exists checks it
  it's stale, using the second parameter (default for the second
  parameter is <CODE>INT_MAX</CODE>, which in practice means the lock will never
  be stale. To free the the lock call <CODE>lock:free()</CODE>. <BR>
   In case of any errors it returns nil and the error message. In
  particular, if the lock exists and is not stale it returns the
  "File exists" message.</DD>
        
    <DT><A name="getcwd"></A><STRONG><CODE>lfs.currentdir ()</CODE></STRONG></DT>
    <DD>Returns a string with the current working directory or <CODE>nil</CODE>
    plus an error string.</DD>
    
    <DT><A name="dir"></A><STRONG><CODE>iter, dir_obj = lfs.dir (path)</CODE></STRONG></DT>
    <DD>
    Lua iterator over the entries of a given directory.
    Each time the iterator is called with <CODE>dir_obj</CODE> it returns a directory entry's name as a string, or
    <CODE>nil</CODE> if there are no more entries. You can also iterate by calling <CODE>dir_obj:next()</CODE>, and
    explicitly close the directory before the iteration finished with <CODE>dir_obj:close()</CODE>.
    Raises an error if <CODE>path</CODE> is not a directory.
    </DD>
    
    <DT><A name="lock"></A><STRONG><CODE>lfs.lock (filehandle, mode[, start[, length]])</CODE></STRONG></DT>
    <DD>Locks a file or a part of it. This function works on <EM>open files</EM>; the
    file handle should be specified as the first argument.
    The string <CODE>mode</CODE> could be either
    <CODE>r</CODE> (for a read/shared lock) or <CODE>w</CODE> (for a
    write/exclusive lock). The optional arguments <CODE>start</CODE>
    and <CODE>length</CODE> can be used to specify a starting point and
    its length; both should be numbers.<BR>
    Returns <CODE>true</CODE> if the operation was successful; in
    case of error, it returns <CODE>nil</CODE> plus an error string.
    </DD>
    
    <DT><A name="mkdir"></A><STRONG><CODE>lfs.mkdir (dirname)</CODE></STRONG></DT>
    <DD>Creates a new directory. The argument is the name of the new
    directory.<BR>
    Returns <CODE>true</CODE> if the operation was successful;
    in case of error, it returns <CODE>nil</CODE> plus an error string.
    </DD>
    
    <DT><A name="rmdir"></A><STRONG><CODE>lfs.rmdir (dirname)</CODE></STRONG></DT>
    <DD>Removes an existing directory. The argument is the name of the directory.<BR>
    Returns <CODE>true</CODE> if the operation was successful;
    in case of error, it returns <CODE>nil</CODE> plus an error string.</DD>

    <DT><A name="setmode"></A><STRONG><CODE>lfs.setmode (file, mode)</CODE></STRONG></DT>
    <DD>Sets the writing mode for a file. The mode string can be either <CODE>binary</CODE> or <CODE>text</CODE>.
    Returns the previous mode string for the file. This function is only available in Windows, so you may want to make sure that
    <CODE>lfs.setmode</CODE> exists before using it.
    </DD>
    
    <DT><A name="symlinkattributes"></A><STRONG><CODE>lfs.symlinkattributes (filepath [, aname])</CODE></STRONG></DT>
    <DD>Identical to <A href="http://keplerproject.github.com/luafilesystem/manual.html#attributes">lfs.attributes</A> except that
    it obtains information about the link itself (not the file it refers to).
    This function is not available in Windows so you may want to make sure that
    <CODE>lfs.symlinkattributes</CODE> exists before using it.
    </DD>

    <DT><A name="touch"></A><STRONG><CODE>lfs.touch (filepath [, atime [, mtime]])</CODE></STRONG></DT>
    <DD>Set access and modification times of a file. This function is
    a bind to <CODE>utime</CODE> function. The first argument is the
    filename, the second argument (<CODE>atime</CODE>) is the access time,
    and the third argument (<CODE>mtime</CODE>) is the modification time.
    Both times are provided in seconds (which should be generated with
    Lua standard function <CODE>os.time</CODE>).
    If the modification time is omitted, the access time provided is used;
    if both times are omitted, the current time is used.<BR>
    Returns <CODE>true</CODE> if the operation was successful;
    in case of error, it returns <CODE>nil</CODE> plus an error string.
    </DD>
    
    <DT><A name="unlock"></A><STRONG><CODE>lfs.unlock (filehandle[, start[, length]])</CODE></STRONG></DT>
    <DD>Unlocks a file or a part of it. This function works on
    <EM>open files</EM>; the file handle should be specified as the first
    argument. The optional arguments <CODE>start</CODE> and
    <CODE>length</CODE> can be used to specify a starting point and its
    length; both should be numbers.<BR>
    Returns <CODE>true</CODE> if the operation was successful;
    in case of error, it returns <CODE>nil</CODE> plus an error string.
    </DD>
</DL>

</DIV> <!-- id="content" -->

</DIV> <!-- id="main" -->

<DIV id="about">
	<P><A href="http://validator.w3.org/check?uri=referer">Valid XHTML 1.0!</A></P>
	<P><SMALL>$Id: manual.html,v 1.45 2009/06/03 20:53:55 mascarenhas Exp $</SMALL></P>
</DIV> <!-- id="about" -->

</DIV> <!-- id="container" -->



</BODY></HTML>